version beta: 
-Token: 
    => very basic ERC-20 Token: DONE ✔️
    => TODO: add decimals and OnlyOwner events (mint and burn) *** see good burn rate DONE ✔️
-Basic website: 
    => Home page: DONE ✔️ *Style: custom logo
    => Account page(TODO: add Style DONE ✔️):
        graphic of the evolution since you bought: DONE ✔️,
        make a function to get token info using Swagger UI DONE ✔️,
        make a component that display those info using axios DONE ✔️,
        INFO TABLE: how many days since the user has bought DONE ✔️, 
        INFO TABLE: how many transaction and how many % of profit DONE ✔️, 
        changing the backgroung of profile: DONE ✔️, 
        automatic refresh after connecting metamask,
        change axios to amplify API calls DONE ✔️,
        change all the address to be the contract address
    => server: clean the code DONE ✔️ + make a function that get all the price every 24 hours DONE ✔️
    => Token Page: DONE ✔️ *Style + direct connect with the contract for tokenomics
    => faq/blog page DONE ✔️ * add more Q&A
    => Tutorial page DONE ✔️ *put the links and images before launching!
    => better NeedMetamask Page DONE ✔️
    => ONE BIG CODE CLEAN !!!!  DONE ✔️
    => make the app native for all platform DONE ✔️
    => securize the app (Snyc or amplify) DONE ✔️
    => find a way to make less api request (not long loading time) DONE ✔️
    => IMPORTANT learn how amazon amplify works DONE ✔️
    => amplify api working + database working DONE ✔️

-Deploy to public using Amplify:
    -make the file downloading system use Storage and only make an api call whit whether or not change the cust_img property. DONE ✔️
    -configure S3 bucket + find out more about Auth package DONE ✔️
    -push new api using storage and s3 bucket DONE ✔️
    -make the api call for 24h data each 24 hours (setTimer function() 24h) DONE ✔️
    -test storage and make function to get the picture DONE ✔️
    -make all picture png files DONE ✔️
    -finish MoonMap DONE ✔️
    -finish white paper
    -make CSS for token page DONE ✔️
    -make CSS for Bug Report and add text DONE ✔️
    -buy domain name ( imperialdao.net ) - 11$/y DONE ✔️

-before Deploy:

    test with canada-central-1:
        -test if connect an profile image still work in canada-central (aws-cognito test connect) DONE ✔️

        -- AMPLIFY PUBLISH --
        -test the node-schedule function (see ToastNotification) to get 24h price data and save it to database DONE ✔️
        -test if create new user works (create test account whit metamask ) else change the try/catch statement in app.js DONE ✔️
        -final check if every functionalities still works fine DONE ✔️
        

     
-------- DONE ----------

-after deployement: 

    priorities:
        -publish white paper
        -first report for investors (english) DONE ✔️
        -premiere lettre aux investisseurs (french) DONE ✔️
        -create a logo DONE ✔️
        -List token to decentralized exchange DONE ✔️
        -have a good liquidity pool 13k/20k
        -make a Discord channel for support DONE ✔️ 
    
    platform: 
        make basic market DONE ✔️
        find employees (1: marketing ✔️ 1: programmer) DONE ✔️

    goals:
        -reach 1000 Holders
        -reach 13 ETH in liquidity / contact investors

    spent: 
        -buy premium access to moralis api for token price - 41 $/m DONE ✔️
        -shopify (publicity/marketing) 
        -css designer (New UI) 900$


-------------------------------------- FEATURES ---------------------------------

-Imperial Market: 
    -create basic UI DONE ✔️
    -create basic template to see NFTs DONE ✔️
    -create UI for posting NFTs DONE ✔️
    -create button to delete DONE ✔️
    -create button to buy DONE ✔️
    -connect the database to the market to get info DONE ✔️
    -create bidding component to switch from classic sell to bidding(Auction)  DONE ✔️
    -create seller profile DONE ✔️
    -load all items part by part (a lot of items) NEW enpoint to load a specific user DONE ✔️
    -connect seller profile to friends feature database DONE ✔️
    -be able to get balance from market  DONE ✔️

    -test update score feature (app.js and nfts.jsx) DONE ✔️
    -test if the sorting algorithme for score works DONE ✔️
    -add categories tag in database (NFT, Ticket etc...) DONE ✔️
    -add search bar for tags DONE ✔️

    -test listing item component for multiple listing  DONE ✔️

    -put gaz fees estimate in receipt DONE ✔️

    -fix multiple box error DONE ✔️

    -add Imperial Account support DONE ✔️

    
    -add gaming item support
    -add description to account and item DONE ✔️
    + image for items DONE ✔️
    -add attribute in description
    -get gazprice in listItem for controle.jsx DONE ✔️ and market.jsx  DONE ✔️
    -get name + image (get it from moralis) in listing custom
    -special section for DDS DONE ✔️
    -manage a lot of items
    -reinstall morsalis in cron job
    -distinguish itemId from database from contract (tokenId)  DONE ✔️

DLC: 
    -Banner to subscribe (free trial)
    -code simple component and backend A.I. (tensorflow js cluster trained on our data)
    -workout the expert mode / advantages
    -add achievements/DLC NFT
    +make basic notification


-Auction: 
    -different section off the menu dedicated to auction item 
    -same database


-Website: 
    -community page DONE ✔️
    -liquidity provider page DONE ✔️
    -fix new moralis update DONE ✔️
    -add new endpoint for friend feature
    -revise cronjob for price checking(important for AI) 
    -change the list methot for pushing (based on request friend ) DONE ✔️

    revise: 
        -Remove shit from server (clean the code for the to lambda server) DONE ✔️ / need more later
        -debug the npm package manager
        -clean and clarify the database endpoint (all features)
        -make the code of the UI less laggy (remove time.sleep in ALL functions see server) see with frontend 
        -remove all api endpoint from the code on github (.env)
        -make S3 bucket more secure

-Friend feature: DONE ✔️
    -use user database or new database + endpoint to load info (ghaph) DONE ✔️
    -develope the endpoint + connection with each feature
    - New database endpoint: Request and Friend DONE ✔️
    scheme: DONE ✔️
            someone request: 
                    |
                    |
                    |
get the address push to the request field in database
                    |
                    |
        get notify and accept or deny
        |                               |
        |                               |
if accepted: move to friend field       if denied, deleted form request field

-test if request friend works DONE ✔️
-test if accept friend works DONE ✔️
-test if remove friend works

-Tickets Wallet feature:
    -Brainstorm ideas on how to integrate the Wallet (mobile) 

    -make a create component  DONE ✔️
    -link with DDS DONE ✔️
    -contract: 
        -NFT  DONE ✔️ ==> make the mint public
        -Tickets  DONE ✔️
        -vp => same as NFT, but with attributes DONE ✔️
        -dds DONE ✔️ add little modification
        -Real DONE ✔️
        -delete fee account from market
        -need to modify the ownable from $CREDITs (Ownable => ownable)

    
    -make link to know about all of our NFT
    -not supported on metamask (link only)
    -MAKE METAMASK WORKING FOR EVERY THING
    -check if we could use less database and more ipfs storage DONE ✔️
    -distinguish erc721 of erc1155 (good abi everywhere in general)
    -remove price from creation (let it to the sell function)
    -get numdays before retrieve working (block.number)
    -need to connect the signer in every single provider (gaz fees failling)

    -add a DDS section in database => tag section DONE ✔️
    -pay gas for creation  DONE ✔️ + check mint vs safeMint + secret for ticket
    -form for DDS listing DONE ✔️
    -gas price for DDS listing DONE ✔️
    -special DDS button to track or see transaction (YNFT) ==> DONE ✔️
    -button to retrieve DONE ✔️
    -new database Input : realPurchase : [[tokenID, itemID], [], ...] DONE ✔️
    -make sure gas fees are well calculated in PayItem ( add purchase item along side with Credits.approve) DONE ✔️
    -update app.js and market to update real item DONE ✔️
    -submit proof of bought item DONE ✔️ make design  DONE ✔️ useEffect  -if you are a seller : get notify when item id bought
    -tell how much time there is to submit proof DONE ✔️
    -NumITEM/orderID =====> itemID + 1 DONE ✔️
    -listen to the event (Prooved) then update status DONE ✔️ /test
    -in purchase item, setup the things for custom purchase ( key and id ) + new database DONE ✔️
   

    -list metadata to ipfs (and set token uri + save CID) DONE ✔️
    -F2C loading screen for gaz fees DONE ✔️
    -get a look at the metadata of the nft before pay gas DONE ✔️
    -get card in props before paying gas fee for creating did DONE ✔️
    -see preview DONE ✔️
    -view item from account DONE ✔️
    -list item from account DONE ✔️
    -link with NFT contract for creating NFT  DONE ✔️
    -add attribute or file to metadata (file activated by the Tag ticket) DONE ✔️
    -add attribute for vp and nft DONE ✔️
    -access ticket items link DONE ✔️
    -form to complete before listing  DONE ✔️ (need dId for DDS) 
    

    -work out a way to encript private Key ( encripted wallet with password)

    TEST:
        -check if ipfs work fine (one upload is better) // add time.wait + add custom file name such as uuid
        -if ipfs not working use other or database
        -check if pay fees work
        -test useLogs for events
        -test DDS listing and purchasing
        -recheck the whole dds in general and note things that are note tested (test most of the things)
        -get items for DDS DONE ✔️

    -make a loading component DONE ✔️
    -make same interface DONE ✔️
    -new connection method to safe the privatekey DONE ✔️
    -make sure friend feature still works DONE ✔️
    -make a useMetamask localstorage to switch without breaking the systeme DONE ✔️
    -decide if better database than localStorage for saving wallet information DONE ✔️
    -get all information (name, billing address, etc) => decentralized identification for card (new local Storage, so no saving info) DONE ✔️
    -calculating the gaz fees and making them pay (or store until they have F2C) DONE ✔️
    -function to change the DiD DONE ✔️

    -getDiD function => fix it by loading DiD contract in the account component DONE ✔️

    -make add payment method just for card no empty field  DONE ✔️
    -make it look better DONE ✔️
    -adapt all feature to metamask account DONE ✔️

-Create instant buy component from fiat currentie ( automate API to connect with a CEX from the app ): DONE ✔️
    -F2C requirement DONE ✔️
    -choose between api or direct CEX DONE ✔️
    -connect wyre api DONE ✔️
    -connect payment method DONE ✔️ + informations from account  DONE ✔️
    -create order with card number with api backend  DONE ✔️
    -be able to switch from one card to another DONE ✔️
    -get Ip address DONE ✔️
    -then track transfert id until completed in F2C page (loading screen), then purchase Item from F2C DONE ✔️
    -adapt all feature to metamask account DONE ✔️

    
    -handle error (+ handle no DID DONE ✔️ )
    -adapt api to moonpay in case wyre fails
    -get contract working in receipt DONE ✔️

    -TEST production mode authentification (url auth + api enable)

- DiD: 
    -make the poll authorization function (status) DONE ✔️
    -test no ethereum (the getGaz method of return) DONE ✔️

-Create a DDS: 
    -custom action of the NFT (custom NFT contract) DONE ✔️
    -provide the dId of users only through contract DONE ✔️
    -keep $credit in contract for x days until proof of sending is provided, then transfert $credit to sender. If not suppled, NFT is deleted and $credit back to sender DONE ✔️
    -proof of sending: DONE ✔️
        -image with signature can be uploaded and verify by expert or AI => future
        -receipt ID for https://www.canadapost-postescanada.ca/cpc/en/personal/sending/letters-mail/registered-mail.page DONE ✔️
        -CPC tracking number canada and U.S. => Internationnal: string QQ 123 456 789 QQ
                                                Local US: 22 digit
    

-List a clear plan of goal and achievements in the about section / revise text (4 main points: easy, secure, accessible and usefull)

-Work out a better way to make the users communicate on the website (community tab) New address DONE ✔️

-Create mobile application using ionic or flutter to make it easier DONE ✔️ using ionic 

-make UseCredit fucntion to store locally info about account so it takes less time to load pages

---------------------------------- FRONTEND ----------------------------------
brainstrom the idea for frontend 

make HOME, ACCOUNT and ABOUT pages 

Colors: 

automations: 

library: 


--------------------- LEGAL -------------------- REPORTED


-make layers document and clarify all the features DONE ✔️
-make graphs for better understanding 
-make projections on how we will make cash 

-redo whitepaper with graphs and make it easier to understand
-revise text in the website 

-calculate taxes in the market DONE ✔️
-make a tax report automation ***


---------------------------------------- Calendar --------------------------------


advance code: end of January

6- present the new document and simpler graphs 

7- make necessery corrections 

8- present to associate 

29 - finish the whitepaper (get it verify: showcase to expert) / full documentation 

get all other information: end of Feburary 

19 - finish all code + frontend

29 - make code clean

MARS: sell 
1- start writing presentation / finishing
*** prediction document

*** brevet/ license 

hire a courtier for selling the software 



- make use of browser memory making a UseAccount component to save time




