version beta: 
-Token: 
    => very basic ERC-20 Token: DONE ✔️
    => TODO: add decimals and OnlyOwner events (mint and burn) *** see good burn rate DONE ✔️
-Basic website: 
    => Home page: DONE ✔️ *Style: custom logo
    => Account page(TODO: add Style DONE ✔️):
        graphic of the evolution since you bought: DONE ✔️,
        make a function to get token info using Swagger UI DONE ✔️,
        make a component that display those info using axios DONE ✔️,
        INFO TABLE: how many days since the user has bought DONE ✔️, 
        INFO TABLE: how many transaction and how many % of profit DONE ✔️, 
        changing the backgroung of profile: DONE ✔️, 
        automatic refresh after connecting metamask,
        change axios to amplify API calls DONE ✔️,
        change all the address to be the contract address
    => server: clean the code DONE ✔️ + make a function that get all the price every 24 hours DONE ✔️
    => Token Page: DONE ✔️ *Style + direct connect with the contract for tokenomics
    => faq/blog page DONE ✔️ * add more Q&A
    => Tutorial page DONE ✔️ *put the links and images before launching!
    => better NeedMetamask Page DONE ✔️
    => ONE BIG CODE CLEAN !!!!  DONE ✔️
    => make the app native for all platform DONE ✔️
    => securize the app (Snyc or amplify) DONE ✔️
    => find a way to make less api request (not long loading time) DONE ✔️
    => IMPORTANT learn how amazon amplify works DONE ✔️
    => amplify api working + database working DONE ✔️

-Deploy to public using Amplify:
    -make the file downloading system use Storage and only make an api call whit whether or not change the cust_img property. DONE ✔️
    -configure S3 bucket + find out more about Auth package DONE ✔️
    -push new api using storage and s3 bucket DONE ✔️
    -make the api call for 24h data each 24 hours (setTimer function() 24h) DONE ✔️
    -test storage and make function to get the picture DONE ✔️
    -make all picture png files DONE ✔️
    -finish MoonMap DONE ✔️
    -finish white paper
    -make CSS for token page DONE ✔️
    -make CSS for Bug Report and add text DONE ✔️
    -buy domain name ( imperialdao.net ) - 11$/y DONE ✔️

-before Deploy:

    test with canada-central-1:
        -test if connect an profile image still work in canada-central (aws-cognito test connect) DONE ✔️

        -- AMPLIFY PUBLISH --
        -test the node-schedule function (see ToastNotification) to get 24h price data and save it to database DONE ✔️
        -test if create new user works (create test account whit metamask ) else change the try/catch statement in app.js DONE ✔️
        -final check if every functionalities still works fine DONE ✔️
        

     


-after deployement: 

    priorities:
        -publish white paper
        -first report for investors (english) DONE ✔️
        -premiere lettre aux investisseurs (french) DONE ✔️
        -create a logo DONE ✔️
        -List token to decentralized exchange DONE ✔️
        -have a good liquidity pool 13k/20k
        -make a Discord channel for support DONE ✔️ 
    
    platform: 
        finish friend feature 
        make basic market DONE ✔️
        find employees (1: marketing ✔️ 1: programmer)

    goals:
        -reach 1000 Holders
        -reach 13 ETH in liquidity

    spent: 
        -buy premium access to moralis api for token price - 41 $/m 

-Imperial Market: 
    -create basic UI DONE ✔️
    -create basic template to see NFTs DONE ✔️
    -create UI for posting NFTs DONE ✔️
    -create button to delete DONE ✔️
    -create button to buy DONE ✔️
    -connect the database to the market to get info DONE ✔️
    -create bidding component to switch from classic sell to bidding(Auction)
    -create seller profile
    -connect seller profile to friends feature database 
    -be able to get balance from market

    -add achievements

-Auction: 
    -different section off the menu dedicated to auction item 
    -same database


-Website: 
    -community page DONE ✔️
    -liquidity provider page DONE ✔️
    -fix new moralis update DONE ✔️
    -add new endpoint for friend feature 

-Friend feature: 
    -use user database or new database + endpoint to load info (ghaph)
    -developpe the endpoint + connection with each feature

-Tickets Wallet feature:
    Brainstorm ideas on how to integrate the Wallet

-List a clear plan of goal and achievements in the about section 

-Work out a better way to make the users communicate on the website (community tab)

-Create instant buy component from fiat currentie ( automate API to connect with a CEX from the app )

-Create mobile application using ionic or flutter to make it easier 




