version beta: 
-Token: 
    => very basic ERC-20 Token: DONE ✔️
    => TODO: add decimals and OnlyOwner events (mint and burn) *** see good burn rate DONE ✔️
-Basic website: 
    => Home page: DONE ✔️ *Style: custom logo
    => Account page(TODO: add Style DONE ✔️):
        graphic of the evolution since you bought: DONE ✔️,
        make a function to get token info using Swagger UI DONE ✔️,
        make a component that display those info using axios DONE ✔️,
        INFO TABLE: how many days since the user has bought DONE ✔️, 
        INFO TABLE: how many transaction and how many % of profit DONE ✔️, 
        changing the backgroung of profile: DONE ✔️, 
        automatic refresh after connecting metamask,
        change axios to amplify API calls DONE ✔️,
        change all the address to be the contract address
    => server: clean the code DONE ✔️ + make a function that get all the price every 24 hours DONE ✔️
    => Token Page: DONE ✔️ *Style + direct connect with the contract for tokenomics
    => faq/blog page DONE ✔️ * add more Q&A
    => Tutorial page DONE ✔️ *put the links and images before launching!
    => better NeedMetamask Page DONE ✔️
    => ONE BIG CODE CLEAN !!!!  DONE ✔️
    => make the app native for all platform DONE ✔️
    => securize the app (Snyc or amplify) DONE ✔️
    => find a way to make less api request (not long loading time) DONE ✔️
    => IMPORTANT learn how amazon amplify works DONE ✔️
    => amplify api working + database working DONE ✔️

-Deploy to public using Amplify:
    -make the file downloading system use Storage and only make an api call whit whether or not change the cust_img property. DONE ✔️
    -configure S3 bucket + find out more about Auth package DONE ✔️
    -push new api using storage and s3 bucket DONE ✔️
    -make the api call for 24h data each 24 hours (setTimer function() 24h) DONE ✔️
    -test storage and make function to get the picture DONE ✔️
    -make all picture png files DONE ✔️
    -finish MoonMap DONE ✔️
    -finish white paper
    -make CSS for token page DONE ✔️
    -make CSS for Bug Report and add text DONE ✔️
    -buy domain name ( imperialdao.net ) - 11$/y DONE ✔️

-before Deploy:

    test with canada-central-1:
        -test if connect an profile image still work in canada-central (aws-cognito test connect) DONE ✔️

        -- AMPLIFY PUBLISH --
        -test the node-schedule function (see ToastNotification) to get 24h price data and save it to database DONE ✔️
        -test if create new user works (create test account whit metamask ) else change the try/catch statement in app.js DONE ✔️
        -final check if every functionalities still works fine DONE ✔️
        

     
-------- DONE ----------

-after deployement: 

    priorities:
        -publish white paper
        -first report for investors (english) DONE ✔️
        -premiere lettre aux investisseurs (french) DONE ✔️
        -create a logo DONE ✔️
        -List token to decentralized exchange DONE ✔️
        -have a good liquidity pool 13k/20k
        -make a Discord channel for support DONE ✔️ 
    
    platform: 
        make basic market DONE ✔️
        find employees (1: marketing ✔️ 1: programmer) DONE ✔️

    goals:
        -reach 1000 Holders
        -reach 13 ETH in liquidity / contact investors

    spent: 
        -buy premium access to moralis api for token price - 41 $/m DONE ✔️
        -shopify (publicity/marketing) 
        -css designer (New UI) 900$


-------------------------------------- FEATURES ---------------------------------

-Imperial Market: 
    -create basic UI DONE ✔️
    -create basic template to see NFTs DONE ✔️
    -create UI for posting NFTs DONE ✔️
    -create button to delete DONE ✔️
    -create button to buy DONE ✔️
    -connect the database to the market to get info DONE ✔️
    -create bidding component to switch from classic sell to bidding(Auction)  DONE ✔️
    -create seller profile DONE ✔️
    -load all items part by part (a lot of items) NEW enpoint to load a specific user DONE ✔️
    -connect seller profile to friends feature database DONE ✔️
    -be able to get balance from market  DONE ✔️

    -test update score feature (app.js and nfts.jsx) DONE ✔️
    -test if the sorting algorithme for score works DONE ✔️
    -add categories tag in database (NFT, Ticket etc...) DONE ✔️
    -add search bar for tags DONE ✔️

    -test listing item component for multiple listing  DONE ✔️

    -put gaz fees estimate in receipt DONE ✔️

    -fix multiple box error DONE ✔️

    -add Imperial Account support DONE ✔️

    
    -add gaming item support
    -add description to account and item DONE ✔️
    + image for items DONE ✔️
    -add attribute in description
    -get gazprice in listItem for controle.jsx DONE ✔️ and market.jsx  DONE ✔️
    -get name + image (get it from moralis) in listing custom
    -special section for DDS DONE ✔️
    -manage a lot of items
    -reinstall morsalis in cron job
    -distinguish itemId from database from contract (tokenId)  DONE ✔️

DLC: 
    -Banner to subscribe (free trial) DONE ✔️
    -code simple component and backend A.I. (tensorflow js cluster trained on our data)
    -workout the expert mode / advantages DONE ✔️ + rewards
    -add achievements/DLC NFT DONE ✔️
    -custom page for seeing the offers and what they garantee DONE ✔️
    -update database (level 0 - 1 - 2 - 3 ==> basic - premium - expert - verified ) DONE ✔️
    -adapt to metamask DONE ✔️
    -DOCUMENT
    +make basic notification
    +review seller profile DONE ✔️
    +remake gui for debit card  DONE ✔️

    -for the actual transaction: make an api for the link in document: https://docs.spreedly.com/basics/purchase/


-Auction: 
    -different section off the menu dedicated to auction item 
    -same database


-Website: 
    -community page DONE ✔️
    -liquidity provider page DONE ✔️
    -fix new moralis update DONE ✔️
    -add new endpoint for friend feature
    -revise cronjob for price checking(important for AI) 
    -change the list methot for pushing (based on request friend ) DONE ✔️

    revise: 
        -Remove shit from server (clean the code for the to lambda server) DONE ✔️ / need more later
        -debug the npm package manager
        -clean and clarify the database endpoint (all features)
        -make the code of the UI less laggy (remove time.sleep in ALL functions see server) see with frontend 
        -remove all api endpoint from the code on github (.env)
        -make S3 bucket more secure

-Friend feature: DONE ✔️
    -use user database or new database + endpoint to load info (ghaph) DONE ✔️
    -develope the endpoint + connection with each feature
    - New database endpoint: Request and Friend DONE ✔️
    scheme: DONE ✔️
            someone request: 
                    |
                    |
                    |
get the address push to the request field in database
                    |
                    |
        get notify and accept or deny
        |                               |
        |                               |
if accepted: move to friend field       if denied, deleted form request field

-test if request friend works DONE ✔️
-test if accept friend works DONE ✔️
-test if remove friend works

-Tickets Wallet feature:
    -Brainstorm ideas on how to integrate the Wallet (mobile) 

    -make a create component  DONE ✔️
    -link with DDS DONE ✔️
    -contract: 
        -NFT  DONE ✔️ ==> make the mint public
        -Tickets  DONE ✔️
        -vp => same as NFT, but with attributes DONE ✔️
        -dds DONE ✔️ add little modification
        -Real DONE ✔️
        -delete fee account from market
        -need to modify the ownable from $CREDITs (Ownable => ownable)

    
    -make link to know about all of our NFT  DONE ✔️
    -document CODE and document TEST
    -not supported on metamask (link only)  DONE ✔️
    -distinguish erc721 of erc1155 (good abi everywhere in general)  DONE ✔️
    -abi for manual listing (only accepting erc721)  DONE ✔️
    -remove price from creation (let it to the sell function) DONE ✔️
    -get numdays before retrieve working (block.number) DONE ✔️
    -need to connect the signer in every single provider (gaz fees failling) ==> use a central provider that is connected to the signer (props. from imperialProfile) DONE ✔️
    -need to get the exact information from a transaction in order to make the gas price work DONE ✔️
    -fix nft list form bug DONE ✔️
    -make listing price * 10 000 from decimals => receipt.jsx DONE ✔️
    -calculate fees on F2C DONE ✔️
    -divide all price by 10 000 for display DONE ✔️
    //check if our total is well written in receipt (tax) DONE ✔️
    -get getClient up and running DONE ✔️
    -gas fee for proof of sending DONE ✔️
    -gas fee for retrieving DONE ✔️
    -get real eth price //api key: 5c62b32f93bf731a5eae052066e37683cdee22fd71f3f4e2b987d495113f8534 DONE ✔️

    -add a DDS section in database => tag section DONE ✔️
    -pay gas for creation  DONE ✔️ + check mint vs safeMint + secret for ticket
    -form for DDS listing DONE ✔️
    -gas price for DDS listing DONE ✔️
    -special DDS button to track or see transaction (YNFT) ==> DONE ✔️
    -button to retrieve DONE ✔️
    -new database Input : realPurchase : [[tokenID, itemID], [], ...] DONE ✔️
    -make sure gas fees are well calculated in PayItem ( add purchase item along side with Credits.approve) DONE ✔️
    -update app.js and market to update real item DONE ✔️
    -submit proof of bought item DONE ✔️ make design  DONE ✔️ useEffect  -if you are a seller : get notify when item id bought
    -tell how much time there is to submit proof DONE ✔️
    -NumITEM/orderID =====> itemID + 1 DONE ✔️
    -listen to the event (Prooved) then update status DONE ✔️ /test
    -in purchase item, setup the things for custom purchase ( key and id ) + new database DONE ✔️
   

    -list metadata to ipfs (and set token uri + save CID) DONE ✔️
    -F2C loading screen for gaz fees DONE ✔️
    -get a look at the metadata of the nft before pay gas DONE ✔️
    -get card in props before paying gas fee for creating did DONE ✔️
    -see preview DONE ✔️
    -view item from account DONE ✔️
    -list item from account DONE ✔️
    -link with NFT contract for creating NFT  DONE ✔️
    -add attribute or file to metadata (file activated by the Tag ticket) DONE ✔️
    -add attribute for vp and nft DONE ✔️
    -access ticket items link DONE ✔️
    -form to complete before listing  DONE ✔️ (need dId for DDS) 
    

    -work out a way to encript private Key ( encripted wallet with password)

    TEST:
        -check if ipfs work fine (one upload is better) // add time.wait + add custom file name such as uuid
        -if ipfs not working use other or database
        -check if pay fees work
        -test useLogs for events
        -recheck the whole dds in general and note things that are note tested (test most of the things)
        -get items for DDS DONE ✔️

        -TEST metamask DONE ✔️
        -TEST gas fees metamask DONE ✔️ //replace provider by nft.provider
        -TEST gas fees real account(plug signer into provider) DONE ✔️
        -TEST decimals for credits

        -TEST listing DONE ✔️ , purchasing  DONE ✔️ and prooving  DONE ✔️ using both account
        -TEST prooving on other metamask account DONE ✔️
        -TEST price approoval in credit --> should be working on mainnet program modifyed, please, republish the contract DONE ✔️
        -MAKE METAMASK WORKING FOR EVERY THING : Profile DONE ✔️, controle DONE ✔️, market DONE ✔️
        -check if we could use less database and more ipfs storage DONE ✔️
        -TEST updating realPurchase api (bug a little bit but should be fine) DONE ✔️
        -TEST (see if nft market still works/debug getItems for market) DONE ✔️

    -make a loading component DONE ✔️
    -make same interface DONE ✔️
    -new connection method to safe the privatekey DONE ✔️
    -make sure friend feature still works DONE ✔️
    -make a useMetamask localstorage to switch without breaking the systeme DONE ✔️
    -decide if better database than localStorage for saving wallet information DONE ✔️
    -get all information (name, billing address, etc) => decentralized identification for card (new local Storage, so no saving info) DONE ✔️
    -calculating the gaz fees and making them pay (or store until they have F2C) DONE ✔️
    -function to change the DiD DONE ✔️

    -getDiD function => fix it by loading DiD contract in the account component DONE ✔️

    -make add payment method just for card no empty field  DONE ✔️
    -make it look better DONE ✔️
    -adapt all feature to metamask account DONE ✔️

-Create instant buy component from fiat currentie ( automate API to connect with a CEX from the app ): DONE ✔️
    -F2C requirement DONE ✔️
    -choose between api or direct CEX DONE ✔️
    -connect wyre api DONE ✔️
    -connect payment method DONE ✔️ + informations from account  DONE ✔️
    -create order with card number with api backend  DONE ✔️
    -be able to switch from one card to another DONE ✔️
    -get Ip address DONE ✔️
    -then track transfert id until completed in F2C page (loading screen), then purchase Item from F2C DONE ✔️
    -adapt all feature to metamask account DONE ✔️

    
    -handle error (+ handle no DID DONE ✔️ )
    -adapt api to moonpay in case wyre fails
    -other https://www.blockchain.com/explorer/api/blockchain_wallet_api
    -get contract working in receipt DONE ✔️

    -TEST production mode authentification (url auth + api enable)

- DiD: 
    -make the poll authorization function (status) DONE ✔️
    -test no ethereum (the getGaz method of return) DONE ✔️

-Create a DDS: 
    -custom action of the NFT (custom NFT contract) DONE ✔️
    -provide the dId of users only through contract DONE ✔️
    -keep $credit in contract for x days until proof of sending is provided, then transfert $credit to sender. If not suppled, NFT is deleted and $credit back to sender DONE ✔️
    -proof of sending: DONE ✔️
        -image with signature can be uploaded and verify by expert or AI => future
        -receipt ID for https://www.canadapost-postescanada.ca/cpc/en/personal/sending/letters-mail/registered-mail.page DONE ✔️
        -CPC tracking number canada and U.S. => Internationnal: string QQ 123 456 789 QQ
                                                Local US: 22 digit
    

-List a clear plan of goal and achievements in the about section / revise text (4 main points: easy, secure, accessible and usefull)

-Work out a better way to make the users communicate on the website (community tab) New address DONE ✔️

-Create mobile application using ionic or flutter to make it easier DONE ✔️ using ionic 

-make UseCredit function to store locally info about account so it takes less time to load pages

---------------------------------- FRONTEND ----------------------------------
brainstrom the idea for frontend 

make HOME, ACCOUNT and ABOUT pages 

Colors: 

automations: 

library: 

---------------------------------- DOCUMENTATION ----------------------------------


1: SUBSCRIBTION
- Subscibtion Advantages: check in controle.jsx for: props.level  => 0 = basic, 1 = premium, 2 = expert, 3 = verify
after make conditions like if(props.level === 2 ) {...} some function 

- Payment: setup a speedly (or stripe, if used for the card saving process) account at the link in the subscribtion.jsx 
after setup a subscibtion payment and enter the card information that are already stored in const pay

* personal notes: I would use Stripe since we NEED something to store credit and debit card, so we could use Stripe for storage and subscibtion
Stripe subscribtion: https://stripe.com/docs/billing/quickstart
Speedly subscibtion: https://docs.spreedly.com/basics/purchase/


2: RECOMMANDATION ALGORYTHM
    see plans in ImperialAI folder. All the setup is already done


3: concerning TRANSFER FROM FIAT TO CRYPTO, in F2C:

- Using Wyre: change from testwyre to sendwyre in url. 
    File: testapi.js

- in order to put the project in production mode, we need to verify the project to the "Brocker Provider" ( as it is now: Wyre)

- to change "Brocker Provider": contact a new "Brocker Provider" and enter the Partner program and change the url, the system stays the same (auth and info pickup). 
    "Brocker Providers": 
        - Mogo,
        - Moonpay,
        - Transak could also work, but it would need to replace the F2C window with a transak window (loosing the card storage part)

*personal notes: it would be better if the F2C stays backend meaning it must be only polling api using the testapi.js since we get all the information with the DID (since we already have all the personnal details, we dont need users to quit to go to another app)

Transak: https://docs.transak.com/docs/web-sdk-integration

*personal notes: I think wyre should stay, because of the backend aspect which allows a better control over users data (and not remake a transak form each time you wnat to buy something)
BUT, if i had to choose between moonpay or transak to replace wyre, i would choose transak, because it is much more similar to wyre (no code changes except for the frontend)


4: CARD SAVING:
- card must be saved using PCI DSS Standard, which is very complexe. 
- For testing this product, we used our own database.
- But for pruduction, a usage of wyre account to safely save card would solve our problem. If for some reason we are using another "Broker Provider",  
an api such as Stripe could do it for us. 

Wyre: https://docs.sendwyre.com/reference/createpaymentmethod
Stripe: https://stripe.com/docs/saving-cards


5: PASSWORD:
- instead of loading the privatekey to the DB, load the json version of the wallet an encrypted wallet and decrypt it with a password form
get the password using a react hook (needPassword in imperialProfile.jsx ) then get the password and encrypt (work also first time connection) ==> line 249

scheme: 
    Password collection ==> getWalletFromDatabase() ==> wallet.decrypt(password)

check documentation: https://docs.ethers.org/v4/api-wallet.html#fromencryptedjson


6: IMPERIAL DELIVERY SYSTEM:

- for extra security: poll extra api in item veryfication ==> take the traking code from the event capture in the transaction of POS (Proof Of Sending) and poll it trough: https://origin-www.canadapost.ca/track-reperage/en#/home for post-Canada

- A bill scanner should be added along side with a verificator which allows us to reward user by paying them part of their bills. 
A deal must be done with etheir a deliver such as Fedex or Usps (or others) to allow verified client to scan their qr code and get a discount on their deliveries

- In order to get the rewards ==> using the $credit system, when seller gets payed, the $credit gets staked and the seller( if having the verified subscription) gets a rewards based on their bill that they are scanning ( already setup )
USING: Proof Of Reward which is pull by oracle

7: MORE:
creation of special micro application (plugin) for special arts (big tech could incoorporate the imperial environment to read arts or content): 
    example: music player for music and some kind of subscription to get some gender of artist (customize your subscription)
    media player for content creator (get royalties on adds)
+ add more categories(tags) to the item creator along with the microapp to make easy to make anything a NFT

example of new categories: 
- music (dont get paid enough) ==> music player(peaple wont use spotify if all of their favourite artists are on our platform (spotify plugin))
- books (librarian fees) ==> kindle or online books plugin
- other contract (notaire fees) ==> add more and more option to personnalize
- property (notaire and seller fees)
- Funding (kickstarter has a 10% fee) ==> a lot of personnalization for funding businesses
- services (difficult to sell online)

8: B2B: 
for B2B behaviour, most of the component only need to be redesign. But, to make things more easy, things could be simplify in the market in order for the commerce to list their item easily. 
Futhermore, Account could be modify so that client cant post things on the market and only the commerce can (special tags). The rest could be added by the commerce as new categories (expend their business)

basically, for market, only need to create a new market contract instance for both digital and real items and plug the address and the market will work. 
So the only thing to change is account and style

so create a new type of account (4,5,6.. ) in subscription level so that account of a e-commerce gets the rights they diserve
ALSO: create a slider to make a selection of currency they want to see instead of just credit(F2C)


integration using b2b: 
    -using the account tags, e-com can easily set types of account and what they want their users to do
    -items can be added as collection (0,1 $/ collection, meaning 10$ for a 100 items collection) // create nft when sold
    -e-com can have special account set and well manage their sell using our algorithme
    -finally new type of items can be created to personnalize selling (for example, things that you want to add to what you buy as attribute) 
    ==> you want to buy x feet of wood? no probleme, a QR code is created for you
    -this sort of methods makes a lot of well sellable and more secure to buy
    -keep the "imperial account" so user can connect with their same account from different e-com (imperial market compatibility logo)

9: DATABASE
 - check to remove a lot of field in the database to decentralize them
Altough database is not used a lot, things such as names, description and color of accounts could be stored on-chain during creation of a new id. But, it would cost the user (arounf 10 pennys) to
change some settings like their name, but it would make the database much lighter

for the item database, image and name can be replace by the metadata
If metadata not working well for created NFTs, switch to a PINATA gateway
==> so, worth to decentralized for e-com, not for individual model ==> program already done
-add string password to authenticate database

finally, credit price can be actualized, since its so low of cost

10: TOKEN REVENUES:
    as for token revenues, as long as a transfer coin is used, the token will get value through liquidity pool. This value is a sort of income, which can be use to lower even more the prices
    users could also stake their coin before depositing them in their accounts so they get a % of reward (Proof Of Reward)



--------------------- LEGAL -------------------- REPORTED


-make layers document and clarify all the features DONE ✔️
-make graphs for better understanding 
-make projections on how we will make cash 

-redo whitepaper with graphs and make it easier to understand
-revise text in the website 

-calculate taxes in the market DONE ✔️
-make a tax report automation ***


---------------------------------------- Calendar --------------------------------


advance code: end of January

6- present the new document and simpler graphs 

7- make necessery corrections 

8- present to associate 

29 - finish the whitepaper (get it verify: showcase to expert) / full documentation 

get all other information: end of Feburary 

19 - finish all code + frontend

29 - make code clean

MARS: sell 
1- start writing presentation / finishing
*** prediction document

*** brevet/ license 

hire a courtier for selling the software 



- make use of browser memory making a UseAccount component to save time




